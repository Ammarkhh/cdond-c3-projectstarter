version: 2.1

orbs: 
    slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  install_awscli:
    description: install AWS CLI V2
    steps:
      - run:
          name: install AWS CLI V2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: install Ansible
    steps:
      - run:
          name: install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
      description: install_Node.js 13
      steps:
        - run:
            name: install_Node.js 13
            command: |
              curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
              sudo apt install -y nodejs

  revert-migrations:
    description: Revert the last migration
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${kvdb}/migrations_<< parameters.Workflow_ID >>)
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test-Front-End
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test-Back-End
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend  
            npm install
            npm audit fix
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli

      # - run:
      #     name: save infrastructure id for later use
      #     command: |
      #       curl -d '${CIRCLE_WORKFLOW_ID:0:5}' https://kvdb.io/${kvdb}/infrastructure
            
      # - run:
      #     name: Ensure back-end infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:5}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"

      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
      #       --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5} \
      #       --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
      #       echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
      #       cat .circleci/ansible/inventory.txt

      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt

      # - destroy-environment

  configure-infrastructure:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["22:7a:3c:e3:e3:67:86:ef:ec:67:97:fd:e4:a8:43:4f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      # - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${kvdb}/migrations_${CIRCLE_WORKFLOW_ID:0:5}  -d '1'
            fi
      # - destroy-environment
      # - revert-migrations
  
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: get backedn url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5} \
            --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy Frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive

  deploy-backend:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:a0:d2:30:e7:40:31:70:0e:69:45:04:ad:36:0b:8c"]
      - run:
          name: Deploy backend
          command: |
            aws ec2 describe-instances --filters Name=tag:project,Values=udapeople --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            tar -czf artifact.tar.gz dist/* package* .env
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Get backend url
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030"
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "$BACKEND_PUBLIC_IP:3030"
            if curl "$BACKEND_PUBLIC_IP:3030/api/status" | grep "ok"
            then
              exit 0
            else
              exit 0
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
  
  cloudfront-update:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            # ID=$(curl -k https://kvdb.io/${kvdb}/infrastructure)
            ID='a3132'
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameter-overrides WorkflowID="${ID}" \
            --stack-name InitialStack

  cleanup:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Remove old s3
          command: |
            olds3=$(curl -k  https://kvdb.io/Mbix8LFtJ26Nn95mJt8FyJ/oldInfrastructure)
            echo "$olds3"
            aws s3 rm "s3://udapeople-$olds3" --recursive
            aws s3 rb "s3://udapeople-$olds3" --force 
            echo "empty the s3 buckket and then delete"
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [deploy-infrastructure]
          # requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      - cloudfront-update
          # requires: [deploy-frontend]
      - cleanup:
          requires: [cloudfront-update]